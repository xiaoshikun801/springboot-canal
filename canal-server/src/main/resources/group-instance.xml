<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<bean class="com.alibaba.otter.canal.instance.spring.support.PropertyPlaceholderConfigurer" lazy-init="false">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="locationNames">
			<list>
				<value>classpath:canal.properties</value>
				<value>classpath:${canal.instance.destination:}-instance.properties</value>
			</list>
		</property>
	</bean>

	<bean id="instance" class="com.alibaba.otter.canal.instance.spring.CanalInstanceWithSpring">
		<property name="destination" value="${canal.instance.destination}" />
		<property name="eventParser" ref="eventParser"/>
		<property name="eventStore" ref="eventStore"/>
		<property name="eventSink" ref="eventSink"/>
		<property name="metaManager" ref="metaManager"/>
		<property name="alarmHandler" ref="alarmHandler"/>
	</bean>

	<bean id="zkClientx" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" >
		<property name="targetClass" value="com.alibaba.otter.canal.common.zookeeper.ZkClientx" />
		<property name="targetMethod" value="getZkClient" />
		<property name="arguments">
			<list>
				<value>${canal.zkServers}</value>
			</list>
		</property>
	</bean>

	<!-- 报警处理类 -->
	<bean id="alarmHandler" class="com.alibaba.otter.canal.common.alarm.LogAlarmHandler" />

	<bean id="metaManager" class="com.alibaba.otter.canal.meta.MemoryMetaManager" />

	<bean id="socketAddressEditor" class="com.alibaba.otter.canal.instance.spring.support.SocketAddressEditor" />
	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="propertyEditorRegistrars">
			<list>
				<ref bean="socketAddressEditor" />
			</list>
		</property>
	</bean>

	<bean id="eventStore" class="com.alibaba.otter.canal.store.memory.MemoryEventStoreWithBuffer">
		<property name="bufferSize" value="${canal.instance.memory.buffer.size}" />
		<property name="bufferMemUnit" value="${canal.instance.memory.buffer.memunit}" />
		<property name="batchMode" value="${canal.instance.memory.batch.mode}" />
		<property name="ddlIsolation" value="${canal.instance.get.ddl.isolation}" />
	</bean>

	<bean id="eventParser" class="com.alibaba.otter.canal.parse.inbound.group.GroupEventParser">
		<property name="eventParsers">
			<list>
				<ref bean="masterInfo" />
			</list>
		</property>
	</bean>

	<bean id="eventSink" class="com.alibaba.otter.canal.sink.entry.EntryEventSink">
		<property name="eventStore" ref="eventStore" />
	</bean>

	<bean id="masterInfo" class="com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser">
		<property name="destination" value="${canal.instance.destination}" />
		<property name="slaveId" value="${canal.instance.mysql.slaveId}" />
		<!-- 心跳配置 -->
		<property name="detectingEnable" value="${canal.instance.detecting.enable}" />
		<property name="detectingSQL" value="${canal.instance.detecting.sql}" />
		<property name="detectingIntervalInSeconds" value="${canal.instance.detecting.interval.time}" />
		<property name="haController">
			<bean class="com.alibaba.otter.canal.parse.ha.HeartBeatHAController">
				<property name="detectingRetryTimes" value="${canal.instance.detecting.retry.threshold}" />
				<property name="switchEnable" value="${canal.instance.detecting.heartbeatHaEnable}" />
			</bean>
		</property>

		<property name="alarmHandler" ref="alarmHandler" />

		<!-- 解析过滤处理 -->
		<property name="eventFilter">
			<bean class="com.alibaba.otter.canal.filter.aviater.AviaterRegexFilter" >
				<constructor-arg index="0" value="${canal.instance.filter.regex}" />
			</bean>
		</property>

		<property name="eventBlackFilter">
			<bean class="com.alibaba.otter.canal.filter.aviater.AviaterRegexFilter" >
				<constructor-arg index="0" value="${canal.instance.filter.black.regex}" />
				<constructor-arg index="1" value="false" />
			</bean>
		</property>
		<!-- 最大事务解析大小，超过该大小后事务将被切分为多个事务投递 -->
		<property name="transactionSize" value="${canal.instance.transaction.size}" />

		<!-- 网络链接参数 -->
		<property name="receiveBufferSize" value="${canal.instance.network.receiveBufferSize}" />
		<property name="sendBufferSize" value="${canal.instance.network.sendBufferSize}" />
		<property name="defaultConnectionTimeoutInSeconds" value="${canal.instance.network.soTimeout}" />

		<!-- 解析编码 -->
		<property name="connectionCharset" value="${canal.instance.connectionCharset}" />

		<!-- 解析位点记录 -->
		<property name="logPositionManager">
			<bean class="com.alibaba.otter.canal.parse.index.MemoryLogPositionManager" />
		</property>

		<!-- failover切换时回退的时间 -->
		<property name="fallbackIntervalInSeconds" value="${canal.instance.fallbackIntervalInSeconds}" />

		<!-- 解析数据库信息 -->
		<property name="masterInfo">
			<bean class="com.alibaba.otter.canal.parse.support.AuthenticationInfo">
				<property name="address" value="${canal.instance.database.address}" />
				<property name="username" value="${canal.instance.database.dbUsername}" />
				<property name="password" value="${canal.instance.database.dbPassword}" />
				<property name="defaultDatabaseName" value="${canal.instance.defaultDatabaseName}" />
			</bean>
		</property>

		<!-- 解析起始位点 -->
		<property name="masterPosition">
			<bean class="com.alibaba.otter.canal.protocol.position.EntryPosition">
				<property name="journalName" value="${canal.instance.database.journal.name}" />
				<property name="position" value="${canal.instance.database.position}" />
				<property name="timestamp" value="${canal.instance.database.timestamp}" />
			</bean>
		</property>
		<property name="filterQueryDml" value="${canal.instance.filter.query.dml}" />
		<property name="filterQueryDcl" value="${canal.instance.filter.query.dcl}" />
		<property name="filterQueryDdl" value="${canal.instance.filter.query.ddl}" />
		<property name="filterTableError" value="${canal.instance.filter.table.error}" />
		<property name="supportBinlogFormats" value="${canal.instance.binlog.format}" />
		<property name="supportBinlogImages" value="${canal.instance.binlog.image}" />
		<property name="eventSink" ref="eventSink"/>

	</bean>




</beans>
